# -*- coding: utf-8 -*-
"""Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GeNcU3lU81xIVw8MEYeopFlv1lUJ9GBv
"""

#import library
import os
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn.preprocessing

from sklearn.model_selection import train_test_split

"""Kemudian, ubah dataset menjadi dataframe dengan fungsi read_csv(). Tampilkan 5 data teratas pada dataframe menggunakan fungsi head()"""

#sumber dataset https://www.kaggle.com/robikscube/hourly-energy-consumption
#Membaca file CSV dan melihat 5 baris teratas
df = pd.read_csv('/content/sample_data/AEP_hourly.csv')
df.head()

#mengetahui jumlah baris
print(len(df['Datetime']))

"""Kita dapat mengecek apakah ada nilai yang hilang dari dataset menggunakan fungsi isnull()."""

#mengecek apakah ada data yang kosong
df.isnull().sum()

#Melakukan Plotting(Belum Di normalisasi)
def plot_series(time, series, format="-", start=0, end=None):
    plt.plot(time[start:end], series[start:end], format)
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.grid(True)

df.plot()
plt.show()

#Melakukan normalisasi dengan minmaxscaler
scaler = sklearn.preprocessing.MinMaxScaler()
df_norm = scaler.fit_transform(df['AEP_MW'].values.reshape(-1,1))
df_norm.shape

##Melakukan Plotting(Sesudah Di normalisasi)
power = df_norm
time = np.array(df.index)
plt.figure(figsize=(10, 6))
plot_series(time, power)

"""Dapat dilihat dari output cell yang kita jalankan menunjukkan bahwa data kita merupakan time series yang bersifat musiman"""

x_train, x_valid, time_train, time_valid = train_test_split(power, time, test_size = 0.2, random_state = 0 , shuffle=False)

'''
split_time = 50000
time_train = time[:split_time]
x_train = power[:split_time]
time_valid = time[split_time:]
x_valid = power[split_time:]
'''

print(len(x_train), len(x_valid))

window_size = 30
batch_size = 32
shuffle_buffer_size = 1000

#Fungsi di bawah menerima sebuah series/atribut kita yang telah di konversi menjadi tipe numpy, lalu mengembalikan label dan atribut dari dataset dalam bentuk batch.
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

tf.keras.backend.clear_session()
tf.random.set_seed(51)
np.random.seed(51)

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=shuffle_buffer_size)

#Membuat model Neural Network(Coba menggunakan 1 layer LSTM)
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv1D(filters=60, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
    tf.keras.layers.LSTM(60,return_sequences=True),
    tf.keras.layers.Dense(10, activation ='relu'),
    tf.keras.layers.Dense(1),
    tf.keras.layers.Lambda(lambda x: x * 400)
])

#Membuat optimizer
optimizer = tf.keras.optimizers.SGD(lr=1e-5, momentum=0.9)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<0.05):
      print("\nMAE telah <5%!")
      self.model.stop_training = True
callbacks = myCallback()

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

#Bismillah
history = model.fit(train_set,epochs=100, callbacks=[callbacks])

def plot(history, info_type='loss'):

    """
    history: the history callback from a model.fit
    info_type: what you want to show. (e.g. 'loss', 'acc', 'accuracy')
    """
    plt.plot(history.history[info_type], label=[info_type])
    try:
        plt.plot(history.history['val_' + info_type], label=['val_' + info_type])
    except Exception:
        print(f'no val_{info_type}')
    plt.title(info_type)
    plt.legend()

plot(history)

plot(history, 'mae')